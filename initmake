#! /bin/sh
:
#$Id: initmake,v 1.24 1993/02/11 12:08:01 berg Exp $

PATH=.:$PATH
BSHELL=$1
shift; MSHELL=$1
shift; RM="$1"
shift; MV="$1"
shift; LN="$1"
shift; USRINCLUDE=$1
shift; LIBPATHS="$1"
shift; DEVNULL=$1
shift; MAKE="$1"
shift; O=$1
shift; CC="$1"
shift; CFLAGS1="$1"
shift; LDFLAGS1="$1"
shift; BINSS="$1"
shift; MANS1S="$1"
shift; MANS5S="$1"
shift; SUBDIRS="$1"

test 1 != $# &&
 echo "Don't start this script directly, use \`make init'" && exit 1

test -z "$MSHELL" || SHELL=$MSHELL
case "$SHELL" in
  *sh*)
     case "$SHELL" in
	*csh*) echo "Warning: really perverted make detected"; SHELL="";;
     esac;;
  *) echo "Warning: perverted make detected"; SHELL="";;
esac
test -z "$SHELL" && SHELL=$BSHELL

export SHELL PATH

FGREP="fgrep"		# POSIX, or not POSIX, that is the question...
if test \^hello = "`echo '^hello' | grep -F '^hello' 2>&1`"
then FGREP="grep -F"				# and POSIX it is!
fi

if test ! -f $USRINCLUDE/stdio.h
then echo 2>&1 "Panic!	   I can't find your system include-files."
  echo 2>&1 "I already looked in \"$USRINCLUDE\".  Please edit the Makefile"
  echo 2>&1 "and make sure that the definition of USRINCLUDE is correct,"
  echo 2>&1 "before retrying another make."
  exit 1
fi

cc=""
cd src				# diving into the source directory ######
cat >_autotst.c <<HERE
main()
{ return 0;
}
HERE
$RM _autotst.rrr _autotst.$O _autotst
for a in "$CC" cc gcc
do
  echo $a $CFLAGS1 _autotst.c -o _autotst $LDFLAGS1 >>_autotst.rrr
  test -z "$cc" -a ! -z "$a" &&
   ($a $CFLAGS1 _autotst.c -o _autotst $LDFLAGS1) >>_autotst.rrr \
   2>&1 && cc="$a"
  echo "::::" >>_autotst.rrr
done
if test -z "$cc"
then
  echo 2>&1 "Whoeaaa!  There's something fishy going on here."
  echo 2>&1 "You have a look and see if you detect anything uncanny:"
  echo 2>&1 "-------------------------------------------------------"
  cat 2>&1 _autotst.rrr
  echo 2>&1 "-------------------------------------------------------"
  echo 2>&1 "I suggest you take a look at the definition of CFLAGS* and CC"
  echo 2>&1 "in the Makefile before you try make again."
  exit 1
fi
$RM _autotst.rrr _autotst.$O _autotst
echo "$cc seems to work fine, using that as the C-compiler"

cat >_autotst.c <<HERE
#include <stdio.h>
#include <sys/stat.h>
main()
{ struct stat buf;return!&buf;
}
HERE

CFLAGS=""
case "$CFLAGS1" in
  *-D_POSIX_SOURCE*);;
  *)
     if $cc -c $CFLAGS1 _autotst.c >$DEVNULL 2>&1
     then
     :
     else
	$RM _autotst.$O
	$cc -c $CFLAGS1 -D_POSIX_SOURCE _autotst.c >$DEVNULL 2>&1 &&
	 CFLAGS=" -D_POSIX_SOURCE"
     fi;;
esac

LDFLAGS=""
export LDFLAGS

test -f _autotst.$O || $cc -c $CFLAGS1 $CFLAGS _autotst.c >$DEVNULL 2>&1
$cc $CFLAGS1 $CFLAGS _autotst.c -o _autotst $LDFLAGS1 -lc >$DEVNULL 2>&1 &&
 LDFLAGS=" -lc"
$RM _autotst.$O _autotst.c _autotst
cd ..			# returning to the main procmail directory ######

cat >checklib <<HERE
name="\$1"
for libpath in $LIBPATHS
do
  set \$libpath/*lib\$name[A-Z.]*
  libname="\$1"
  if test -f \$libname
  then
     case "\$libpath" in
	/usr/local/lib)
	   case "\$LDFLAGS" in
	      *-L\$libpath*) LDFLAGS="\$LDFLAGS -L\$libpath";;
	   esac;;
     esac
     echo "\$LDFLAGS -l\$name"
     exit 0
  fi
done
echo "\$LDFLAGS"
HERE
chmod 0755 checklib

#LDFLAGS=`checklib c`
test ! -f $USRINC/dirent.h -a ! -f $USRINC/ndir.h -a -f $USRINC/sys/ndir.h ||
 LDFLAGS=`checklib dir`
LDFLAGS=`checklib x`
LDFLAGS=`checklib net`			# why did everyone have to think up
LDFLAGS=`checklib inet`			# their own name?
LDFLAGS=`checklib nsl_s`
LDFLAGS=`checklib nsl_i`
LDFLAGS=`checklib nsl`
LDFLAGS=`checklib gen`
LDFLAGS=`checklib socket`
LDFLAGS=`checklib sockdns`
#LDFLAGS=`checklib resolv`		# not really needed, is it?
LDFLAGS=`checklib sun`
$RM checklib

test -z "$CFLAGS" || echo "Added CFLAGS=$CFLAGS"
test -z "$LDFLAGS" || echo "Added LDFLAGS=$LDFLAGS"

for a in $SUBDIRS
do
  if test ! -f $a/Makefile.init
  then
     $LN $a/Makefile $a/Makefile.init
     $RM $a/Makefile
     $LN $a/Makefile.init $a/Makefile
  fi
done

test -f Makefile.0 || sed -e '/^# Makefile - mark/,$ !d' <Makefile >Makefile.0
sed -e '/^# Makefile - mark/,$ d' <Makefile >_Makefile
echo "# Makefile.1 - mark, don't (re)move this, a sed script needs it
" >>_Makefile

test a$SHELL != a$MSHELL && echo  "SHELL	= $SHELL"	>>_Makefile
echo "FGREP	= $FGREP"				>>_Makefile
test -z "$MAKE" && echo "MAKE	= make"			>>_Makefile
test a"$cc" != a"$CC" && echo "CC	= $cc"		>>_Makefile

echo "CFLAGS	= \$(CFLAGS1)$CFLAGS"			>>_Makefile
echo "LDFLAGS	= \$(LDFLAGS1)$LDFLAGS"			>>_Makefile
echo							>>_Makefile

MANSS=""
MANS1=""
MANS5=""
MANS=""
NMANS=""
BINS=""
NBINS=""
for a in $MANS1S
do
  MANSS="$MANSS $a.1"
  MANS1="$MANS1 $a.\$(MAN1SUFFIX)"
done
for a in $MANS5S
do
  MANSS="$MANSS $a.5"
  MANS5="$MANS5 $a.\$(MAN5SUFFIX)"
done
for a in $MANSS
do
  MANS="$MANS new/$a"
  NMANS="$NMANS ../new/$a"
done
for a in $BINSS
do
  BINS="$BINS new/$a"
  NBINS="$NBINS ../new/$a"
done

echo "BINS=$BINS"					>>_Makefile
echo "MANS=$MANS"					>>_Makefile
echo "MANS1=$MANS1"					>>_Makefile
echo "MANS5=$MANS5"					>>_Makefile
echo "MANSS=$MANSS"					>>_Makefile
echo "NBINS=$NBINS"					>>_Makefile
echo "NMANS=$NMANS"					>>_Makefile
echo							>>_Makefile

for a in $SUBDIRS
do
  sed -e '1,/^# Makefile.0 - mark/ d' <_Makefile >$a/_Makefile
  cat $a/Makefile.0 >>$a/_Makefile
done

for a in $BINSS
do
  echo							>>src/_Makefile
  echo "../new/$a: $a ../config.check"			>>src/_Makefile
  echo "	@\$(RM) \$@"				>>src/_Makefile
  echo "	\$(LN) $a \$@"				>>src/_Makefile
done

for a in $MANSS
do
  echo							>>man/_Makefile
  echo "../new/$a: $a ../config.check"			>>man/_Makefile
  echo "	@\$(RM) \$@"				>>man/_Makefile
  echo "	\$(LN) $a \$@"				>>man/_Makefile
done

for a in $MANS1S
do
  echo							>>man/_Makefile
  echo "$a.1: $a.man man.sed mansed"			>>man/_Makefile
  echo \
   "	@\$(SHELL) ./mansed \$(SHELL) $a.man \$@ \"\$(RM)\" \$(DEVNULL)" \
   >>man/_Makefile
done

for a in $MANS5S
do
  echo							>>man/_Makefile
  echo "$a.5: $a.man man.sed mansed"			>>man/_Makefile
  echo \
   "	@\$(SHELL) ./mansed \$(SHELL) $a.man \$@ \"\$(RM)\" \$(DEVNULL)" \
   >>man/_Makefile
done

cat Makefile.1 >>_Makefile
$MV _Makefile Makefile

for a in $SUBDIRS
do
  echo "#" >>$a/_Makefile
  $MV $a/_Makefile $a/Makefile
done
