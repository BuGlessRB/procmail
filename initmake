#! /bin/sh
:
#$Id: initmake,v 1.42 1993/10/29 16:41:56 berg Exp $

PATH=.:$PATH
BSHELL=$1
shift; MSHELL=$1
shift; RM="$1"
shift; MV="$1"
shift; LN="$1"
shift; SEARCHLIBS="$1"
shift; LIBPATHS="$1"
shift; DEVNULL=$1
shift; MAKE="$1"
shift; O=$1
shift; CC="$1"
shift; CFLAGS1="$1"
shift; LDFLAGS1="$1"
shift; BINSS="$1"
shift; MANS1S="$1"
shift; MANS5S="$1"
shift; SUBDIRS="$1"
shift; BINDIR="$1"

test 1 != $# &&
 echo "Don't start this script directly, use \`make init'" && exit 1

test -z "$MSHELL" || SHELL=$MSHELL
case "$SHELL" in
  *sh*)
     case "$SHELL" in
	*csh*) echo "Warning: really perverted make detected"; SHELL="";;
	*zsh*) $RM src/_autotst
	    $SHELL <<HERE
	    O="echo test >src/_autotst"
	    exec 2>$DEVNULL
	    \$O
HERE
	   if test ! -f src/_autotst
	   then
	      echo "Warning: your $SHELL is broken, avoiding it"; SHELL=""
	   fi ;;
     esac
     if test ! -z "$SHELL"
     then
	$SHELL <<HERE
	exec 2>$DEVNULL
	echo test >src/_autotst
	echo test >src/_autotst
HERE
	if test $? = 1
	then
	   echo "Warning: your $SHELL has noclobber turned on, avoiding it"
	   SHELL=""
	fi
     fi
     $RM src/_autotst;;
  *) echo "Warning: perverted make detected"; SHELL="";;
esac
test -z "$SHELL" && SHELL=$BSHELL

export SHELL PATH

FGREP="fgrep"		# POSIX, or not POSIX, that is the question...
if test \^hello = "`echo '^hello' | grep -F '^hello' 2>&1`"
then FGREP="grep -F"				# and POSIX it is!
fi

echo hi | $FGREP hi >$DEVNULL
t=$?
echo ho | $FGREP hi >$DEVNULL
f=$?
if test 0 != $t -o 0 = $f
then
  echo "Your \"$FGREP\" program seems to be incapable of returning a proper"
  echo "exitvalue depending on the success of the search.  This script can"
  echo "not work without it."
  exit 2
fi

if test ! -z "$LD_LIBRARY_PATH"
then
  echo '***************************** WARNING *********************************'
  echo '* You seem to have set the LD_LIBRARY_PATH variable, this might cause *'
  echo '* some trouble during the execution of this autoconf script.  If the  *'
  echo '* the make does not finish by itself, do a: "make clean",	      *'
  echo '* clear LD_LIBRARY_PATH from the environment, and start over.	      *'
  echo '***************************** WARNING *********************************'
fi

cd src				# diving into the source directory ######

newln=""
$RM _autotst.rrr _autotst
echo hi >_autotst.rrr
if $LN _autotst.rrr _autotst
then
:
else
   $LN -s _autotst.rrr _autotst && LN="$LN -s" && newln=yes
fi

cat >_autotst.c <<HERE
main()
{ return 0;
}
HERE
$RM _autotst.rrr _autotst.$O _autotst

cc=""

for a in "$CC" cc gcc
do
  echo $a $CFLAGS1 _autotst.c -o _autotst $LDFLAGS1 >>_autotst.rrr
  test -z "$cc" -a ! -z "$a" &&
   ($a $CFLAGS1 _autotst.c -o _autotst $LDFLAGS1) >>_autotst.rrr \
   2>&1 && cc="$a"
  echo "::::" >>_autotst.rrr
done
if test -z "$cc"
then
  echo 2>&1 "Whoeaaa!  There's something fishy going on here."
  echo 2>&1 "You have a look and see if you detect anything uncanny:"
  echo 2>&1 "-------------------------------------------------------"
  cat 2>&1 _autotst.rrr
  echo 2>&1 "-------------------------------------------------------"
  echo 2>&1 "I suggest you take a look at the definition of CFLAGS* and CC"
  echo 2>&1 "in the Makefile before you try make again."
  exit 1
fi
$RM _autotst.rrr _autotst.$O _autotst
echo "$cc seems to work fine, using that as the C-compiler"

cat >_autotst.c <<HERE
#include <sys/types.h>
#include <stdio.h>
#include <sys/stat.h>
main()
{ struct stat buf;return!&buf;
}
HERE

CFLAGS=""

case "$CFLAGS1" in
  *-D_POSIX_SOURCE*);;
  *)
     if $cc -c $CFLAGS1 _autotst.c >$DEVNULL 2>&1
     then
     :
     else
	$RM _autotst.$O
	$cc -c $CFLAGS1 -D_POSIX_SOURCE _autotst.c >$DEVNULL 2>&1 &&
	 CFLAGS=" -D_POSIX_SOURCE"
     fi;;
esac

LDFLAGSC=""

test -f _autotst.$O || $cc -c $CFLAGS1 $CFLAGS _autotst.c >$DEVNULL 2>&1
$cc $CFLAGS1 $CFLAGS _autotst.$O -o _autotst $LDFLAGS1 -lc >_autotst.rrr 2>&1 \
 && if grep "[\"']c['\"]" _autotst.rrr >$DEVNULL ||
   fgrep libc _autotst.rrr >$DEVNULL
  then
  :
  else
     LDFLAGSC=" -lc"
  fi

LDFLAGS="$SEARCHLIBS"
firstrun=yes

while $RM _autotst
 $cc $CFLAGS1 $CFLAGS _autotst.$O -o _autotst $LDFLAGS1 $LDFLAGS \
  $LDFLAGSC >_autotst.rrr 2>&1
 test $firstrun = yes -o ! -f _autotst
do
  firstrun=no
  set dummy $LDFLAGS
  shift
  echo 2>&1 "	...scanning for $# libraries..."
  NEWLDFLAGS=""
  for a in $LDFLAGS dummy
  do
     if test dummy != $a
     then
	lib=`expr $a : '-l\(.*\)'`
	if $FGREP lib$lib _autotst.rrr >$DEVNULL ||
	 $FGREP -e $a _autotst.rrr >$DEVNULL ||
	 grep "[\"']$lib['\"]" _autotst.rrr >$DEVNULL
	then
	:
	else
	   OLDIFS="$IFS"; IFS=":$IFS"
	   found=no
	   for libpath in $LIBPATHS $LD_LIBRARY_PATH
	   do
	      set $libpath/*lib$lib[A-Z.]*
	      test -f $1 && found=yes
	   done
	   IFS="$OLDIFS"
	   test yes = $found && NEWLDFLAGS="$NEWLDFLAGS $a"
	fi
     fi
  done
  if test a"$LDFLAGS" = a"$NEWLDFLAGS"
  then
     echo 2>&1 "Whoeaaa!  There's something fishy going on here."
     echo 2>&1 "You have a look and see if you detect anything uncanny:"
     echo 2>&1 "-------------------------------------------------------"
     cat 2>&1 _autotst.rrr
     echo 2>&1 "-------------------------------------------------------"
     echo 2>&1 \
       "I suggest you take a look at the definition of LDFLAGS* and SEARCHLIBS"
     echo 2>&1 "in the Makefile before you try make again."
     echo 2>&1 "Also: write me a mail showing the errorlog you just generated."
     echo 2>&1 "The errorlog can still be found in src/_autotst.rrr"
     echo 2>&1 "It would be helpful if you could mention what machine and OS"
     echo 2>&1 "you are trying to compile this on (uname -a).  Thanks."
     exit 1
  fi
  LDFLAGS="$NEWLDFLAGS"
done

$RM _autotst.$O _autotst.c _autotst
cd ..			# returning to the main procmail directory ######

LDFLAGS="$LDFLAGS$LDFLAGSC"

test -z "$CFLAGS" || echo "Added CFLAGS=$CFLAGS"
test -z "$LDFLAGS" || echo "Added LDFLAGS=$LDFLAGS"

for a in $SUBDIRS
do
  if test ! -f $a/Makefile.init
  then
     case "$LN" in
	*-s*) cp $a/Makefile $a/Makefile.init ;;
	*) $LN $a/Makefile $a/Makefile.init
	   $RM $a/Makefile
	   $LN $a/Makefile.init $a/Makefile ;;
     esac
  fi
done

test -f Makefile.0 || sed -e '/^# Makefile - mark/,$ !d' <Makefile >Makefile.0
sed -e '/^# Makefile - mark/,$ d' <Makefile >_Makefile
echo "# Makefile.1 - mark, don't (re)move this, a sed script needs it
" >>_Makefile

test a$SHELL != a$MSHELL && echo  "SHELL	= $SHELL"	>>_Makefile
echo "FGREP	= $FGREP"				>>_Makefile
test -z "$newln" || echo "LN	= $LN"			>>_Makefile
test -z "$MAKE" && echo "MAKE	= make"			>>_Makefile
test a"$cc" != a"$CC" && echo "CC	= $cc"		>>_Makefile

echo "CFLAGS	= \$(CFLAGS1)$CFLAGS"			>>_Makefile
echo "LDFLAGS	= \$(LDFLAGS1)$LDFLAGS"			>>_Makefile
echo							>>_Makefile

MANSS=""
MANS1=""
MANS5=""
MANS=""
NMANS=""
BINS=""
NBINS=""
for a in $MANS1S
do
  MANSS="$MANSS $a.1"
  MANS1="$MANS1 $a.\$(MAN1SUFFIX)"
done
for a in $MANS5S
do
  MANSS="$MANSS $a.5"
  MANS5="$MANS5 $a.\$(MAN5SUFFIX)"
done
for a in $MANSS
do
  MANS="$MANS new/$a"
  NMANS="$NMANS ../new/$a"
done
for a in $BINSS
do
  BINS="$BINS new/$a"
  NBINS="$NBINS ../new/$a"
done

echo "BINS=$BINS"					>>_Makefile
echo "MANS=$MANS"					>>_Makefile
echo "MANS1=$MANS1"					>>_Makefile
echo "MANS5=$MANS5"					>>_Makefile
echo "MANSS=$MANSS"					>>_Makefile
echo "NBINS=$NBINS"					>>_Makefile
echo "NMANS=$NMANS"					>>_Makefile
echo							>>_Makefile

for a in $SUBDIRS
do
  sed -e '1,/^# Makefile.0 - mark/ d' <_Makefile >$a/_Makefile
  cat $a/Makefile.0 >>$a/_Makefile
done

echo "BINDIR=$BINDIR"					>>src/_Makefile

for a in $BINSS
do
  echo							>>src/_Makefile
  echo "../new/$a: $a ../config.check"			>>src/_Makefile
  echo "	@\$(RM) \$@"				>>src/_Makefile
  echo "	\$(LN) ../src/$a \$@"			>>src/_Makefile
done

for a in $MANSS
do
  echo							>>man/_Makefile
  echo "../new/$a: $a ../config.check"			>>man/_Makefile
  echo "	@\$(RM) \$@"				>>man/_Makefile
  echo "	\$(LN) ../man/$a \$@"			>>man/_Makefile
done

for a in $MANS1S
do
  echo							>>man/_Makefile
  echo "$a.1: $a.man man.sed mansed"			>>man/_Makefile
  echo \
   "	\$(SHELL) ./mansed \$(SHELL) $a.man \$@ \"\$(RM)\" \$(DEVNULL)" \
   >>man/_Makefile
done

for a in $MANS5S
do
  echo							>>man/_Makefile
  echo "$a.5: $a.man man.sed mansed"			>>man/_Makefile
  echo \
   "	\$(SHELL) ./mansed \$(SHELL) $a.man \$@ \"\$(RM)\" \$(DEVNULL)" \
   >>man/_Makefile
done

cat Makefile.1 >>_Makefile
$MV _Makefile Makefile

sleep 1			# Some machines are just too speedy, make gets confused

for a in $SUBDIRS
do
  echo "#" >>$a/_Makefile
  $MV $a/_Makefile $a/Makefile
done
