$Id: Manual,v 1.10 1993/05/05 13:05:34 berg Exp $

		Written by Stephen R. van den Berg.
					berg@pool.informatik.rwth-aachen.de
					berg@physik.tu-muenchen.de

Contents:
---------	1. Creating and removing mailinglists or archive servers
		2. Remote maintenance of mailinglists
		3. Customisation
		3a.Digest processing
		3b.Schematic overview of what goes on behind the scenes
		4. The archive server
		5. The format of the dist file
		6. Multigram and the thresholds in rc.init/rc.custom


1. Creating and removing mailinglists or archive servers
   -----------------------------------------------------

Make sure that the .bin directory is in your PATH.  Now you can issue
commands like:

	createlist testing
	createlist testing joe@somewhere.edu
	createlist -a testing joe@somewhere.edu
	removelist testing

The first command creates a mailinglist with two useful addresses:

	testing
	testing-request

The second command does the same, but it also specifies joe@somewhere.edu
to be the responsible contact person for this list.

The third command does the same, except instead of creating a mailinglist,
it creates an archive server.

The fourth command removes all traces of the "testing" mailinglist again.

There are two other convenience-utilitis that can be used:
	delink
		It will unlink a file from its hardlinked counterpart(s).
	showlink
		It will display what groups of files are linked together.


2. Remote maintenance of mailinglists
   ----------------------------------

To facilitate remote maintenance of some mailinglists by their maintainers
I have created the .bin/x_command script.  It parses mails sent to the
-request address and can execute some administrative commands.

The mail should be sent to the -request address of a mailinglist and
should contain a field in the header looking like this:

X-Command: joe@somewhere.edu password command

"command" can be anything of the following:

	subscribe mailaddress
	unsubscribe mailaddress
	showdist			To list the distfile
	showlog				To list the log
	wipelog				To clear the log
	help				To show this command summary
	info				Ditto

The exact fieldname defaults to "X-Command", but can be customised to
whatever you want.

The password defaults to "password", but can/should be changed.

The "joe@somewhere.edu" is always the mail address of the maintainer.  Note
that this has to match what was specified on the command line of
"createlist" when the list was created.

Note that the X-Command: field has to be part of the header, when it's
in the body of the mail, it has no effect.

Anytime an X-Command: mail has been processed, the results will be
mailed back to the maintainer of the list, and the X-Command: field
will have been renamed to X-Processed:.

Although this remote-facility is convenient, some might argue that it
presents a security hole.  Well, in order to make this hole as small as
possible, you can keep the password secret.  Also, the exact mailaddress
of the maintainer might not be publicly known.	You can simply change
the X-Command field into something else like X-MyCommand.  Above all, since
faking mail is a well known possibility it would be ridiculous to take
more precautions than these.  Besides, if someone indeed manages to sneek in
a bogus X-Command:, it will never go unnoticed since the mailing list
maintainer (and only the maintainer) will always receive the X-Processed:
mail.


3. Customisation
   -------------

The mailinglists can be customised in several ways:

- For all the lists:
	- Since all the lists share the same help.txt, subscibe.txt, rc.init,
	  rc.submit and rc.request files (hardlinked), any change to them
	  will affect all lists.
	- Since all the lists have the .bin directory in their PATH, any
	  change to one of the Bourne shell scripts in there will affect
	  them all.
- Per list:
	- Every list directory contains an "rc.custom" rcfile which can
	  be edited to your hearts content to customise certain parameters
	  for this list only.
	- For graver customisation you can remove the hardlink (using
	  .bin/delink for example) to any of the files in a list directory and
	  provide that list with its own copy in order to edit that to taste.
	- Since the current directory is in the PATH before the .bin
	  directory you can create per-list copies of any of the Bourne shell
	  scripts in .bin which can then be changed without affecting the
	  other lists.
- Per group of lists:
	- The same applies as when customising per list, but you should
	  then hardlink the appropriate files among the group of list
	  directories.

If you are not using the remote-maintenance facility and you start editing
or customising scripts/files by hand, then you should make sure that there
doesn't arrive any mail to those lists that are affected by your changes.

If you are editing while the system is running you can temporarily put
incoming mails on hold;	 you can do this:

- for all the lists by creating the file:	.etc/rc.lock
- only for one list by creating the file:	rc.lock
  in the list directory of that list.

The .bin/flist command checks to see if these rc.lock files exist AND are
not older than 17 minutes before delivering the mail.  So, if you create
an rc.lock file, mails to that (or all) lists will stall for the next
17 minutes.  If you need more time, touch the file every so often.
You should remove the rc.lock files again after finishing your editing.


3a.Digest processing
   -----------------

You can configure a list to send out digests of accumulated submissions.
In order to do so, simply uncomment the appropriate assignment to
digest_flag in rc.init (if you want all lists to be digested) or rc.custom
(if you only want this list to be digested).  Digests are then sent out
every so often depending on size and age of the accumulated messages.

The conditions for sending out a digest are checked during the arrival
of every submission.  If however traffic on the list sometimes is very low
(i.e. less often than the maximum age of a digest) a digest could be laying
around for longer than the specified maximum period (3 days by default).

In order to make sure that the digest gets sent out anyway, you should be
running the .bin/flush_digests program every so often.	The recommended
procedure is to create a cron job (under the list account) that contains
something like the following entry:

0 6 * * * /home/list/.bin/flush_digests

This will ensure that at six o'clock in the morning all the overdue digests
will be sent out.  Beware: call flush_digests with an absolute or relative
path, do not rely on PATH to find it for you (flush_digests uses $0 to
find the location of the lists).

If you want to give your subscribers the choice of receiving digests or not.
This is what you can do:

	Create two lists.  E.g. if your list would be called "thelist", then
	you have the `real' list called "thelist" (created and used like
	a regular list) and the `digested' list called "thelist-d".

	In the distfile of thelist you should include thelist-d as one of
	the subscribers.  In the rc.custom file of thelist-d you should
	edit the assignment to undigested_list to read
	"undigested_list =	thelist@$domain".

	After you've done this, you're all set.	 People that want digests
	simply subscribe to thelist-d and people that don't, subscribe to
	thelist.


3b.Schematic overview of what goes on behind the scenes
   ----------------------------------------------------

Suppose you have two entries in the aliases file, one for thelist@domain
and one for thelist-request@domain.

Whenever mail arrives for either address, the following happens:
	- flist is started suid root with thelist as its argument
		- changes its uid and gid to that of the list account
		- changes its current directory to that of thelist
		- waits until both ../.etc/rc.lock and rc.lock are gone or
		  are old enough (17 minutes)

Then, if it was a regular submission to thelist@domain:
	- flist execs procmail with rcfile rc.submit
		- pulls in rc.init that sets up the defaults
		- pulls in rc.custom that overrides some defaults (if any)
		- checks the submission format and fires of sendmail to
		  send the mail to thelist-dist@domain
	- If the mail was an administrative request, it does not get
	  passed on to the list, instead, procmail pulls in rc.request

But, if it was an administrative mail for thelist-request@domain:
	- flist execs procmail with rcfile rc.request
		- pulls in rc.init that sets up the defaults
		- pulls in rc.custom that overrides some defaults (if any)
		- performs the necessary actions, depending on the content
		- if the content was undecipherable, it gets passed on to
		  the maintainer of thelist

If there are grave system failures during all this, the catch-all script
rc.post will kick in and make sure that the mail is stashed away somewhere
or forwarded to the maintainer, whatever works.	 This to ensure that no
mail gets lost.


4. The archive server
   ------------------

All mail (except mail being forwarded from another mailinglist) sent to any
of the lists is archived.  The archiving is fairly straightforward.
E.g. if you have a list called "scuba", then all submissions are archived
in scuba/archive/latest/.  The mails will be stored one-mail-per-file each.
The files will be numbered.

Now, normally, only the last two mails will be kept around, the others
are periodically removed.  This in order to keep down the archiving costs
for people with limited diskspace.  To disable archiving completely,
edit the rc.submit file.  To simply make the archive-history longer,
edit the rc.custom file.  To get more sophisticated archiving, like grouping
submissions monthly, you should either create a cron job or edit the
.bin/arch_trunc file.

The archive server can be accessed per mailinglist by sending mail
to the -request address with the following Subject:

	Subject: archive

The body of the mail or the rest of the subject line can then be
filed with requests to the archive server.  It basically understands
three commands:

	get file ...
	ls directory ...
	help

The archive server does a thorough check on the commands and the files
that are requested.  This to ensure that it does not access any files
outside the "scuba/archive" directory.	Any text-file that you put below
the "scuba/archive" directory can now be retrieved by the archive commands.

The whole archive server can be found in the .bin/arch_retrieve script.


5. The format of the dist file
   ---------------------------

You do not need to know this, unless you edit the dist file by hand or want
to incorporate an existing list of addresses.

In order to distribute incoming submissions the dist file is fed to sendmail
with the regular :include: alias.  So the format of this file must
be in accordance with what sendmail would expect.  In addition to that
this file is searched and edited by multigram in order to find particular
subscribers.  The format which multigram expects is a bit more rigid than
what sendmail allows.

The following conditions apply:
- One subscriber per line.
- Empty lines are allowed.
- The mail address of the subscriber must be the first word on the line.
- Comments may follow the address (but separated from the address by
  at least one whitespace character).
- Everything preceding the line containing:
	(Only addresses below this line can be automatically removed)
  is write protected from changes by multigram (i.e. these addresses can
  never be automatically/accidentally unsubscribed).
- If the line:
	(Only addresses below this line can be automatically removed)
  is not present at all, automatic unsubscriptions to this list are impossible.
- Whenever multigram automatically removes an address from the list, it
  rewrites the dist file `in situ'.  This means that the dist file will be
  contracted at that point, any excess slack at the end will be overwritten
  by newlines (i.e. the dist file never shrinks, this because ANSI-C does not
  provide a truncate() command of some kind).  I choose to write in situ in
  order to avoid copying the dist file every time it changes (a real life
  saver if the list grows too big).
- Multigram always adds new subscribers on the line immediately following the
  last filled entry in the dist file.

Some sample entries (the preferred format):
	joe@some.where
	joe@some.where (some comment)
	joe@some.where (some comment) (some more comment)

Depreciated, but allowed:
	<joe@some.where>
	<joe@some.where> some comment
	<joe@some.where> (some comment)

Not allowed by multigram (although sendmail doesn't mind):
	(some comment) joe@some.where
	some comment <joe@some.where>


6. Multigram and the thresholds in rc.init/rc.custom
   -------------------------------------------------

The rc.init and rc.custom scripts define some threshold values:

	match_threshold, off_threshold, reject_threshold, submit_threshold.

These values are fed to multigram as a cut-off value with which to decide
if a certain mail address is on a list.
The higher the threshold, the better the match must be.	 The thresholds
have a scale from -16383 to 32767.  This means that, for instance a threshold
of 30730 can be used to find only mailaddresses that are almost verbatim
on the list.  A value of 24476 on the other hand allows for some error
(like mailaddresses munged by gateways etc.) in finding matches to the
list.

The values 30730 and 24476 are somewhat arbitrary values which seem
to work well for the particular problems at hand.

To get a feeling for the values computed by multigram you can do
the following test:

	Create a file with the same format as the distfile, fill it with
	any number of addresses you like (e.g. you could take an existing
	distfile).
	Now make a copy of this `distfile' and alter some of the addresses
	a bit (like omit one character, or add some gateway information,
	switch two words, change it into an uucp address, etc.).
	Next you should call up multigram with the following command line:

		multigram -l-16000 -b300 pseudo_distfile <altered_distfile

	Multigram will display up the 300 best matches it found after
	crossreferencing altered_distfile and pseudo_distfile.
	The output produced by multigram can be disected as follows:

		lineno. name1 goodness name2

	Lineno. and name1 refer to the line number in pseudo_distfile which
	contains the mailaddress name1.	 Goodness is the metric that
	corresponds to the aforementioned threshold values, and name2 is
	the matching mailaddress from altered_distfile (which is usually
	the incoming mail).

	Once you get the hang of it you can play around a bit with the
	entries in altered_distfile by mutilating them more and more in
	order to see what multigram makes of it (try inserting some non-
	existing addresses as well).
