.Id $Id: procmailex.man,v 1.14 1993/05/18 13:05:24 berg Exp $
.de Sx
.PP
.ne \\$1
.Rs
..
.de Ex
.Re
.PP
..
.TH PROCMAILEX 5 \*(Dt BuGless
.na
.SH NAME
procmailex \- procmail rcfile examples
.SH SYNOPSIS
.B $HOME/@PROCMAILRC@ examples
.ad
.Sh DESCRIPTION
For a description of the rcfile format see
.BR procmailrc (5).
.PP
This man page shows several example recipes.  For examples of complete rcfiles
you can check the NOTES section in
.BR procmail (1),
or look at the example rcfiles part of the procmail source distribution
(procmail*/examples/?procmailrc).
.Sh EXAMPLES
Sort out all mail coming from the scuba-dive mailing list into the mailfolder
scubafile (uses the locallockfile scubafile.lock).
.Sx 3
::
^TOscuba
scubafile
.Ex
Forward all mail from peter about compilers to william (and keep a copy
of it here in petcompil).
.Sx 7
:2 @CONTINUE@
^From.*peter
^Subject:.*compilers
! william@somewhere.edu

   :@ALSO_NEXT_RECIPE@
   petcompil
.Ex
An equivalent, but slightly slower solution that accomplishes the same:
.Sx 9
:2 @CONTINUE@
^From.*peter
^Subject:.*compilers
! william@somewhere.edu

   :2
   ^From.*peter
   ^Subject:.*compilers
   petcompil
.Ex
Add the headers of all messages that didn't come from the postmaster
to your private header collection (for
statistics or mail debugging); and use the lockfile `headc.lock'.  In order
to make sure the lockfile is not removed until the pipe has finished,
you have to specify option `@WAIT_EXIT@'; otherwise the lockfile would be
removed as soon as the pipe has accepted the mail.
.Sx 3
:@PASS_HEAD@@WAIT_EXIT@@CONTINUE@:
!@FROMMkey@
| uncompress headc.Z; cat >>headc; compress headc
.Ex
Forward all mails shorter than 1000 bytes to my home address (no lockfile
needed on this recipe).
.Sx 3
:
< 1000
! myname@home
.Ex
Split up incoming digests from the surfing mailing list into their individual
messages, and store them into surfing, using surfing.lock as the locallockfile.
.Sx 3
::
^Subject:.*surfing.*Digest
| formail @FM_SKIP@1 \-@FM_DIGEST@@FM_SPLIT@ cat >>surfing
.Ex
Store everything coming from the postmaster or mailer-daemon (like bounced
mail) into the file postm, using postm.lock as the locallockfile.
.Sx 3
::
@FROMMkey@
postm
.Ex
A simple autoreply recipe.  It makes sure that neither mail from any daemon
(like bouncing mail or mail from mailing-lists), nor mail coming from yourself
will be autoreplied.  If this precaution would not be taken, disaster could
result (`ringing' mail).  In order for this recipe to autoreply to all the
incoming mail, you should of course insert it before all other recipes in your
rcfile.  However, it is advisable to put it
.I after
any recipes that process the mails from subscribed mailinglists; it generally
is not a good idea to generate autoreplies to mailinglists (yes, the
!^FROM_DAEMON regexp should already catch those, but if the mailinglist
doesn't follow accepted conventions, this might not be enough).
.Sx 4
: 2 @PASS_HEAD@ @CONTINUE@
!^FROM_DAEMON
!^From +YOUR_LOGIN_NAME
| (formail \-@FM_REPLY@ \-@FM_ADD_ALWAYS@"Precedence: junk";\e
   echo "Mail received.") | $SENDMAIL \-t
.Ex
A more complicated autoreply recipe that implements the functional equivalent
of the well known
.BR vacation (1)
program.  This recipe is based on the same principles as the last one (prevent
`ringing' mail).  In addition to that however, it maintains a vacation database
by extracting the name of the sender and appending it to the file
$ALREADYSENT, if the name is
.B not
already in there.  If the name was new, an autoreply will be sent (using the
`@ALSO_N_IF_SUCC@' flag functionality).  To reliably extract the name of the
sender, I let formail generate an autoreply header (thereby making it figure
out the most appropriate sender address), and then telling it to extract the
value of the `To:' field.
.Sx 14
SHELL=/bin/sh    # for other shells, this might need adjustment
ALREADYSENT=$HOME/vacation     # the vacation database

: 2 @PASS_HEAD@@WAIT_EXIT_QUIET@@CONTINUE@:                       # the lockfile is important
!^FROM_DAEMON
!^From +YOUR_LOGIN_NAME
| FROM="`formail \-@FM_REPLY@@FM_EXTRACT@ To:`" ;\e
  if fgrep \-e "$FROM" <$ALREADYSENT ;\e
  then exit 1 ;\e
  else echo "$FROM" >>$ALREADYSENT ;\e
  fi

   :@ALSO_N_IF_SUCC@@PASS_HEAD@@CONTINUE@
   | (formail \-@FM_REPLY@@FM_ADD_ALWAYS@"Precedence: junk";\e
      echo "Mail received.") | $SENDMAIL \-t
.Ex
Store all messages concerning TeX in separate, unique filenames, in a directory
named texmail (this directory has to exist); there is no need to use lockfiles
in this case, so we won't.
.Sx 3
:
(^TO|^Subject:.*)TeX[^t]
texmail
.Ex
The same as above, except now we store the mails in numbered files (MH mail
folder), again the texmail directory should exist already.
.Sx 3
:
(^TO|^Subject:.*)TeX[^t]
texmail/.
Or you could file the mail in several directory folders at the same time.
The following recipe will deliver the mail to two MH-folders and one
directory folder.  It is actually only one file with two extra hardlinks.
.Sx 3
:
(^TO|^Subject:.*)TeX[^t]
texmail/. wordprocessing dtp/.
.Ex
Store all the messages about meetings in a folder that is in a directory
that changes every month.  E.g. if it were January 1994, the folder
would have the name `94-01/meeting' and the locallockfile would be
`94-01/meeting.lock'.
.Sx 3
::
meeting
`date +%y-%m`/meeting
.Ex
The same as above, but, if the `94-01' directory wouldn't have existed, it
is created automatically:
.Sx 9
MONTHFOLDER=`date +%y-%m`

:@IGNORE_WRITERR@
? test ! \-d $MONTHFOLDER
| mkdir $MONTHFOLDER

::
meeting
${MONTHFOLDER}/meeting
.Ex
The same as above, but now by slightly different means:
.Sx 6
MONTHFOLDER=`date +%y-%m`
DUMMY=`test \-d $MONTHFOLDER || mkdir $MONTHFOLDER`

::
meeting
${MONTHFOLDER}/meeting
.Ex
When delivering to emacs folders (i.e. mailfolders managed by any emacs
mail package, e.g. RMAIL or VM) directly, you should use emacs-compatible
lockfiles.  The emacs mailers are a bit braindamaged in that respect, they get
very upset if someone delivers to mailfolders which they already have in their
internal buffers.  The following recipe assumes that the $HOME equals
/home/john.
.Sx 5
MAILDIR=Mail

::/usr/local/lib/emacs/lock/!home!john!Mail!mailbox
^Subject:.*whatever
mailbox
.Ex
To extract certain headers from a mail and put them into environment
variables you can use any of the following constructs:
.Sx 5
SUBJECT=`formail \-@FM_EXTRACT@Subject:`    # regular field
FROM=`formail \-@FM_REPLY@@FM_TRUST@ \-@FM_EXTRACT@To:`        # special case

:0@PASS_HEAD@                             # alternate method
KEYWORDS=| formail \-@FM_EXTRACT@Keywords:
.Ex
If you are using temporary files in a procmailrc file, and want to make
sure that they are removed just before procmail exits, you could use
something along the lines of:
.Sx 2
TEMPORARY=/tmp/pmail.$$
TRAP="/bin/rm \-f $TEMPORARY"
.Ex
The TRAP keyword can also be used to change the exitcode of procmail.
I.e. if you want procmail to return an exitcode of `1' instead of its
regular exitcodes, you could simply use:
.Sx 2
TRAP="exit 1;"   # The trailing semi-colon is important
                 # since exit is not a standalone program
.Ex
The following recipe prints every incoming mail that looks like a postscript
file.
.Sx 3
:@BODY_GREP@@PASS_BODY@
^^%!
| lpr
.Ex
The following recipe does the same, but is a bit more selective.  It only
prints the postscript file if it comes from the print-server.  The first
condition matches only if it is found in the header (i.e. no preceding empty
line).  The second condition only matches at the start of the body (i.e.
right after the
.B first
empty line).
.Sx
:2 @HEAD_GREP@@BODY_GREP@ @PASS_BODY@
^^(.+$)*From[ :].*print-server
^^(.+$)*^%!
| lpr
.Ex
Suppose you have two accounts, you use both accounts regularly, but they are
in very distinct places (i.e. you can only read mail that arrived at either one
of the accounts).  You would like to forward mail arriving at account one to
account two, and the other way around.  The first thing that comes to mind is
using .forward files at both sites; this won't work of course, since you will
be creating a mail loop.  This mail loop can be avoided by inserting the
following recipe in front of all other recipes in the @PROCMAILRC@ files on
both sites.  If you make sure that you add the same X-Loop: field at both
sites, mail can now safely be forwarded to the other account from either of
them.
.Sx 4
:@CONTINUE@
!^X-Loop: yourname@your.main.mail.address
| formail \-@FM_ADD_ALWAYS@ "X-Loop: yourname@your.main.mail.address" | \e
   $SENDMAIL \-oi yourname@the.other.account
.Ex
The following one is rather exotic, but it only serves to demonstrate a
feature.  Suppose you have a file in your HOME directory called ".urgent",
and the (one) person named in that file is the sender of an incoming mail,
you'd like that mail to be stored in $MAILDIR/urgent instead of in any of the
normal mailfolders it would have been sorted in.  Then this is what you could
do (beware, the filelength of $HOME/.urgent should be well below $LINEBUF,
increase LINEBUF if necessary):
.Sx 5
URGMATCH=`cat $HOME/.urgent`

:@BODY_GREP@:
$^From.*${URGMATCH}.*
urgent
.Re
.Sh "SEE ALSO"
.na
.nh
.BR procmail (1),
.BR procmailrc (5),
.BR sh (1),
.BR csh (1),
.BR mail (1),
.BR mailx (1),
.BR binmail (1),
.BR uucp (1),
.BR aliases (5),
.BR sendmail (8),
.BR egrep (1),
.BR grep (1),
.BR biff (1),
.BR comsat (8),
.BR lockfile (1),
.BR formail (1)
.hy
.ad
