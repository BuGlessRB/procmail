
Discusses:
		1. One home directory, several machine architectures
		2. Procmail as an integrated local mail delivery agent
		2a.Special directions for sites with sendmail
		2b.Special directions for sites with smail
		2c.Special directions for sites with SysV /etc/mail/mailsurr
		3. Changing the mail spool directory to $HOME for all users
		4. Security considerations (when installing procmail suid root)
		5. Some exorbitant examples of rcfile formats
		6. Some advanced examples of the use of the 'A' flag

				---

1. One home directory, several machine architectures
   -------------------------------------------------

For users that have the very same home directory on machines with differing
architectures (i.e. you need different executables), and they
have to explicitly use (i.e. the system administrator did not arrange,
for example, /usr/local/bin/procmail to have exactly the right contents
depending on from which machine it is called) two executables of procmail,
I have the following suggestion to use as a .forward file (examples are for
sparc and sun3 architectures):

"|IFS=' ';if /usr/bin/sparc;then exec /home/berg/bin.sun4/procmail;else exec /home/berg/bin.sun3/procmail;fi #YOUR_LOGIN_NAME"

or alternatively:

"|IFS=' ';exec /home/berg/bin.`/usr/bin/arch`/procmail #YOUR_LOGIN_NAME"

Please note, in the .forward file there can NOT be any newlines between
the doublequotes, i.e. the former example *has* to be typed in as one long
line.

If, on the other hand, you have to log in to every machine to read mail
arrived for you on that machine, a different solution might be more
appropriate; in that case put something like the following two lines in your
.forward file:

YOUR_LOGIN_NAME@your.favourite.machine
"|IFS=' ';if test .`/bin/uname -n` = .your.favourite.machine; then /exec /home/berg/bin/procmail; else exit 0; fi #YOUR_LOGIN_NAME"

The leading dots are important.	 Check what `/bin/uname -n` returns on
your.favourite.machine, and substitute that for your.favourite.machine in the
sample .forward file.  If your system does not have /bin/uname, check if there
is a /bin/hostname.

				---

2. Procmail as an integrated local mail delivery agent
   ---------------------------------------------------

Completely integrating procmail in the mail delivery means that mail is
delivered as normal, unless a .procmailrc file is present in the home
directory of the recipient.  This will be completely independent of the
fact if a .forward file is present.  This will not break anything, it
just makes the use of procmail easier because people are not required to
start up procmail from within their .forward files.  Creation of a .procmailrc
file will suffice.

The generic way to accomplish this (works with sendmail, smail and any other
mail system that uses a local mail delivery program that takes the mail-
to-be-delivered on stdin and the recipient(s) on the command line, with or
without the "-d" option) is this:

Move your current local mail delivery agent (e.g. /bin/mail, /bin/lmail,
/usr/lib/mail/mail.local, etc.) out of the way, and create a (symbolic or hard)
link from there to procmail, as in "ln /usr/local/bin/procmail /bin/lmail".

Beware, however, that if you are using this method, /bin/mail can *only* be
used to deliver mail.  On many systems /bin/mail has several uses (also to
read mail or check for mail).  So, it would definitely be preferred if you
could edit the invocation of /bin/mail from within your mail transport agent
to invoke procmail instead (with appropriate flags, if needed).	 Special
directions detailing this process for some of the more popular MTAs are
included in sections (2a) and (2b) below.

In addition to needing root privileges upon startup, on some systems procmail
needs to be sgid to daemon or mail.  One way to check is by looking at the
current mail delivery agent (usually /bin/mail) and to mimic its permissions,
owner and group.  If you're not quite sure, just type "make recommend" and some
suitable recommendations will be made for your particular environment.

The same might apply to the "lockfile" program, in order for it to be able to
create and unlink lockfiles in the mail spool directory it might need to be
sgid to daemon or mail, not to worry however, "lockfile" will not enable users
to abuse the sgid/suid-ness.

				---

2a.Special directions for sites with sendmail
   ------------------------------------------

The following line should take the place of the standard
Mlocal rule in your sendmail.cf (this way sendmail will start up procmail with
root priv, procmail will immediately setuid itself to the recipient's uid):

Mlocal, P=/usr/local/bin/procmail, F=lsSDFMhP, S=10, R=20, A=procmail -d $u

As for the remaining flags "S=10, R=20", if your system uses others or
none on the current Mlocal rule, use those instead of "S=10, R=20".

				---

2b.Special directions for sites with smail
   ---------------------------------------

For smail 2.x users there are two options:
 i. Move the current local-mail-delivery program (probably /bin/lmail) out of
    the way, make a symbolic or hard link from procmail to the name of that
    program (e.g. "ln /usr/local/bin/procmail /bin/lmail")
 ii.Make sure the following macro is defined in src/defs.h:
    #define LMAIL(frm,sys) "/usr/local/bin/procmail -d"

For smail 3.x users there are also two options:
 i. The same solution as for smail 2.x (however, method ii is preferred)
 ii.Replace any existing "local"-entry in the /usr/lib/smail/transports file
    (create one, if need be) with the following two lines:

local: return_path, local, from, driver=pipe; user=root,
	cmd="/usr/local/bin/procmail -d $($user$)"

				---

2c.Special directions for sites with SysV /etc/mail/mailsurr
   ---------------------------------------------------------

Some systems use a SysV /bin/mail that supports mailsurr.  To interface
procmail with mailsurr the following two lines should be inserted in the
/etc/mail/mailsurr file (preferably at the bottom):

'(.+)' '([^@!]+)' '<S=0;C=67,75;F=*;
	/usr/local/bin/procmail -f \\1 -d \\2'

				---

3. Changing the mail spool directory to $HOME for all users
   --------------------------------------------------------

There are many different reasons why more and more sites decide not to
store mail in /usr/spool/mail or /usr/mail anymore.
Some of the obvious advantages when storing mail in the recipient's home
directory are:
	- Mail is automatically subject to his quota limitations.
	- Often there is more room on the home partitions than on that
	  one /usr/mail partition.

The quota limitations also apply to /usr/spool/mail or /usr/mail if procmail
does the delivery.  This quota limitation often does not work with the
regular /bin/mail since it often writes the mailbox with root permissions
(eluding the quota restrictions).

However, if you are going to install procmail as the integrated local
delivery agent, and you want mail to be delivered to, say, $HOME/.mail
by default, this is what you have to do:

	Edit the procmail*/config.h file.   Uncomment and possibly change
	the SYSTEM_MBOX define.	 Procmail now delivers there by default.

	In order to make sure that normal mailtools can find the new
	system mailboxes, you should make sure that every user has the
	MAIL environment variable set to be equal to whatever you
	defined SYSTEM_MBOX to be.  Some braindamaged mail programs
	do not pick up the MAIL environment variable, these either
	have to be patched/recompiled or you have to create symbolic
	links in /usr/mail to every person's new mailbox.

				---

4. Security considerations (when installing procmail suid root)
   -------------------------------------------------------------

If in EXPLICIT DELIVERY mode (typically when called from within sendmail)
procmail will ALWAYS change UID and gid to the RECIPIENT's defaults as soon as
it starts reading the recipient's $HOME/.procmailrc file.

If NOT in explicit delivery mode (typically when called from within the
recipient's $HOME/.forward file) procmail will ALWAYS change UID and gid to
the real uid and gid of the INVOKER (effectively losing any suid or sgid
privileges).

These two precautions should effectively eliminate any security holes because
procmail will always have the uid of the person whose commands it is executing.

To summarise, procmail will only behave better if made suid/sgid something, in
fact, making procmail suid/sgid something will *improve* security on systems
which have dynamically linked libraries.

				---

5. Some exorbitant examples of rcfile formats
   ------------------------------------------

# Now follows an example of what you can do in a procmailrc file
HELLO=oneword
HELLO="two words"
HELLO='two words'	HELLO  =	one\
word
HELLO=two\ words
HELLO=two\ `echo words`
HELLO=			# empty
HELLO			# This will wipe "HELLO" from the environment
HELLO	 =    "three words"\ yes
HELLO	=	"$HELLO `cat somefile`	"	# Trailing blanks
HELLO = "wheeee`date`${HELLO} this works too"	 HELLO = 'But so does this!'

# As you can see, every trick in the book of /bin/sh programming can be used
# (and more).

LOCALLOCKFILE = llf

  ::$LOCALLOCKFILE
grep for this
 |$HELLO		# calls up a program named "But" with 3 arguments

:: "test ing"		# lockfilename with a space in it
grep for this
  |$HELLO

:
or for this
|"$HELLO"		# tries to call up a program named "But so does this!"

:
and this
|$HELLO \
there		# action lines can be continued

				---

6. Some advanced examples of the use of the 'A' flag
   -------------------------------------------------

:c		# Specify the 'c' otherwise we never arrive at the next recipe
^From Myfriend
every_message_from_my_friend		# Mailbox for everything he/she writes

:Ac			# Note the 'c' again
! my_other_friend      # Forward everything Myfriend writes to my_other_friend

:1Ac
^Subject:.*jokes
! my_third_friend	# Forward everything Myfriend writes about jokes
			# to my_third_friend

:2A
^Subject:.*parties
!beach
! my_fourth_friend	# Forward everything Myfriend writes about parties,
			# except beach parties, to my_fourth_friend

:A			# Provide a mail sink, in order to fake procmail into
/dev/null		# believing that the mail was absorbed/delivered,
			# even if the mail was about beach parties :-).
		# This is not the best solution though, better would be to
		# rearrange these last five recipes so that the current
		# number one or two is last, the current number five can be
		# omitted then.

				---
